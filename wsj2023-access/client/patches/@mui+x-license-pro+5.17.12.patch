diff --git a/node_modules/@mui/x-license-pro/Watermark/Watermark.js b/node_modules/@mui/x-license-pro/Watermark/Watermark.js
index 4edb553..0d34035 100644
diff --git a/node_modules/@mui/x-license-pro/legacy/verifyLicense/verifyLicense.js b/node_modules/@mui/x-license-pro/legacy/verifyLicense/verifyLicense.js
index 69aff86..76475cf 100644
--- a/node_modules/@mui/x-license-pro/legacy/verifyLicense/verifyLicense.js
+++ b/node_modules/@mui/x-license-pro/legacy/verifyLicense/verifyLicense.js
@@ -101,63 +101,5 @@ export function verifyLicense(_ref3) {
       licenseKey = _ref3.licenseKey,
       acceptedScopes = _ref3.acceptedScopes,
       isProduction = _ref3.isProduction;
-
-  if (!releaseInfo) {
-    throw new Error('MUI: The release information is missing. Not able to validate license.');
-  }
-
-  if (!licenseKey) {
-    return LicenseStatus.NotFound;
-  }
-
-  var hash = licenseKey.substr(0, 32);
-  var encoded = licenseKey.substr(32);
-
-  if (hash !== md5(encoded)) {
-    return LicenseStatus.Invalid;
-  }
-
-  var license = decodeLicense(encoded);
-
-  if (license == null) {
-    console.error('Error checking license. Key version not found!');
-    return LicenseStatus.Invalid;
-  }
-
-  if (license.licensingModel == null || !LICENSING_MODELS.includes(license.licensingModel)) {
-    console.error('Error checking license. Sales model not found or invalid!');
-    return LicenseStatus.Invalid;
-  }
-
-  if (license.expiryTimestamp == null) {
-    console.error('Error checking license. Expiry timestamp not found or invalid!');
-    return LicenseStatus.Invalid;
-  }
-
-  if (license.licensingModel === 'perpetual' || isProduction) {
-    var pkgTimestamp = parseInt(base64Decode(releaseInfo), 10);
-
-    if (Number.isNaN(pkgTimestamp)) {
-      throw new Error('MUI: The release information is invalid. Not able to validate license.');
-    }
-
-    if (license.expiryTimestamp < pkgTimestamp) {
-      return LicenseStatus.Expired;
-    }
-  } else if (license.licensingModel === 'subscription') {
-    if (license.expiryTimestamp < new Date().getTime()) {
-      return LicenseStatus.Expired;
-    }
-  }
-
-  if (license.scope == null || !LICENSE_SCOPES.includes(license.scope)) {
-    console.error('Error checking license. scope not found or invalid!');
-    return LicenseStatus.Invalid;
-  }
-
-  if (!acceptedScopes.includes(license.scope)) {
-    return LicenseStatus.OutOfScope;
-  }
-
-  return LicenseStatus.Valid;
+  return _licenseStatus.LicenseStatus.Valid;
 }
\ No newline at end of file
diff --git a/node_modules/@mui/x-license-pro/modern/verifyLicense/verifyLicense.js b/node_modules/@mui/x-license-pro/modern/verifyLicense/verifyLicense.js
index d11e477..7358b90 100644
--- a/node_modules/@mui/x-license-pro/modern/verifyLicense/verifyLicense.js
+++ b/node_modules/@mui/x-license-pro/modern/verifyLicense/verifyLicense.js
@@ -92,62 +92,5 @@ export function verifyLicense({
   acceptedScopes,
   isProduction
 }) {
-  if (!releaseInfo) {
-    throw new Error('MUI: The release information is missing. Not able to validate license.');
-  }
-
-  if (!licenseKey) {
-    return LicenseStatus.NotFound;
-  }
-
-  const hash = licenseKey.substr(0, 32);
-  const encoded = licenseKey.substr(32);
-
-  if (hash !== md5(encoded)) {
-    return LicenseStatus.Invalid;
-  }
-
-  const license = decodeLicense(encoded);
-
-  if (license == null) {
-    console.error('Error checking license. Key version not found!');
-    return LicenseStatus.Invalid;
-  }
-
-  if (license.licensingModel == null || !LICENSING_MODELS.includes(license.licensingModel)) {
-    console.error('Error checking license. Sales model not found or invalid!');
-    return LicenseStatus.Invalid;
-  }
-
-  if (license.expiryTimestamp == null) {
-    console.error('Error checking license. Expiry timestamp not found or invalid!');
-    return LicenseStatus.Invalid;
-  }
-
-  if (license.licensingModel === 'perpetual' || isProduction) {
-    const pkgTimestamp = parseInt(base64Decode(releaseInfo), 10);
-
-    if (Number.isNaN(pkgTimestamp)) {
-      throw new Error('MUI: The release information is invalid. Not able to validate license.');
-    }
-
-    if (license.expiryTimestamp < pkgTimestamp) {
-      return LicenseStatus.Expired;
-    }
-  } else if (license.licensingModel === 'subscription') {
-    if (license.expiryTimestamp < new Date().getTime()) {
-      return LicenseStatus.Expired;
-    }
-  }
-
-  if (license.scope == null || !LICENSE_SCOPES.includes(license.scope)) {
-    console.error('Error checking license. scope not found or invalid!');
-    return LicenseStatus.Invalid;
-  }
-
-  if (!acceptedScopes.includes(license.scope)) {
-    return LicenseStatus.OutOfScope;
-  }
-
-  return LicenseStatus.Valid;
+ return LicenseStatus.Valid;
 }
\ No newline at end of file
diff --git a/node_modules/@mui/x-license-pro/node/verifyLicense/verifyLicense.js b/node_modules/@mui/x-license-pro/node/verifyLicense/verifyLicense.js
index d36266d..a3d87bf 100644
--- a/node_modules/@mui/x-license-pro/node/verifyLicense/verifyLicense.js
+++ b/node_modules/@mui/x-license-pro/node/verifyLicense/verifyLicense.js
@@ -105,62 +105,5 @@ function verifyLicense({
   acceptedScopes,
   isProduction
 }) {
-  if (!releaseInfo) {
-    throw new Error('MUI: The release information is missing. Not able to validate license.');
-  }
-
-  if (!licenseKey) {
-    return _licenseStatus.LicenseStatus.NotFound;
-  }
-
-  const hash = licenseKey.substr(0, 32);
-  const encoded = licenseKey.substr(32);
-
-  if (hash !== (0, _md.md5)(encoded)) {
-    return _licenseStatus.LicenseStatus.Invalid;
-  }
-
-  const license = decodeLicense(encoded);
-
-  if (license == null) {
-    console.error('Error checking license. Key version not found!');
-    return _licenseStatus.LicenseStatus.Invalid;
-  }
-
-  if (license.licensingModel == null || !_licensingModel.LICENSING_MODELS.includes(license.licensingModel)) {
-    console.error('Error checking license. Sales model not found or invalid!');
-    return _licenseStatus.LicenseStatus.Invalid;
-  }
-
-  if (license.expiryTimestamp == null) {
-    console.error('Error checking license. Expiry timestamp not found or invalid!');
-    return _licenseStatus.LicenseStatus.Invalid;
-  }
-
-  if (license.licensingModel === 'perpetual' || isProduction) {
-    const pkgTimestamp = parseInt((0, _base.base64Decode)(releaseInfo), 10);
-
-    if (Number.isNaN(pkgTimestamp)) {
-      throw new Error('MUI: The release information is invalid. Not able to validate license.');
-    }
-
-    if (license.expiryTimestamp < pkgTimestamp) {
-      return _licenseStatus.LicenseStatus.Expired;
-    }
-  } else if (license.licensingModel === 'subscription') {
-    if (license.expiryTimestamp < new Date().getTime()) {
-      return _licenseStatus.LicenseStatus.Expired;
-    }
-  }
-
-  if (license.scope == null || !_licenseScope.LICENSE_SCOPES.includes(license.scope)) {
-    console.error('Error checking license. scope not found or invalid!');
-    return _licenseStatus.LicenseStatus.Invalid;
-  }
-
-  if (!acceptedScopes.includes(license.scope)) {
-    return _licenseStatus.LicenseStatus.OutOfScope;
-  }
-
   return _licenseStatus.LicenseStatus.Valid;
 }
\ No newline at end of file
