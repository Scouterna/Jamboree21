<?php

namespace MobileFrontend\Transforms;

use DOMDocument;
use DOMElement;
use DOMXPath;
use Exception;
use Html;
use MobileUI;
use ResourceLoader;

/**
 * Implements IMobileTransform, that splits the body of the document into
 * sections demarcated by the $headings elements. Also moves the first paragraph
 * in the lead section above the infobox.
 *
 * All member elements of the sections are added to a <code><div></code> so
 * that the section bodies are clearly defined (to be "expandable" for
 * example).
 *
 * @see IMobileTransform
 */
class MakeSectionsTransform implements IMobileTransform {

	/**
	 * Class name for collapsible section wrappers
	 */
	public const STYLE_COLLAPSIBLE_SECTION_CLASS = 'collapsible-block';

	/**
	 * Whether scripts can be added in the output.
	 * @var bool
	 */
	private $scriptsEnabled;

	/**
	 * List of tags that could be considered as section headers.
	 * @var array
	 */
	private $topHeadingTags;

	/**
	 *
	 * @param array $topHeadingTags list of tags could ne cosidered as sections
	 * @param bool $scriptsEnabled wheather scripts are enabled
	 */
	public function __construct(
		array $topHeadingTags,
		bool $scriptsEnabled
	) {
		$this->topHeadingTags = $topHeadingTags;
		$this->scriptsEnabled = $scriptsEnabled;
	}

	/**
	 * Actually splits splits the body of the document into sections
	 *
	 * @param DOMElement $body representing the HTML of the current article. In the HTML the sections
	 *  should not be wrapped.
	 * @param DOMElement[] $headings The headings returned by
	 * @see MobileFormatter::getHeadings
	 */
	private function makeSections( DOMElement $body, array $headings ) {
		// Find the parser output wrapper div
		$xpath = new DOMXPath( $body->ownerDocument );
		$containers = $xpath->query( 'body/div[@class="mw-parser-output"][1]' );
		if ( !$containers->length ) {
			// No wrapper? This could be an old parser cache entry, or perhaps the
			// OutputPage contained something that was not generated by the parser.
			// Try using the <body> as the container.
			$containers = $xpath->query( 'body' );
			if ( !$containers->length ) {
				throw new Exception( "HTML lacked body element even though we put it there ourselves" );
			}
		}

		$container = $containers->item( 0 );
		$containerChild = $container->firstChild;
		$firstHeading = reset( $headings );
		$firstHeadingName = $firstHeading ? $firstHeading->nodeName : false;
		$sectionNumber = 0;
		$sectionBody = $this->createSectionBodyElement( $body->ownerDocument, $sectionNumber, false );

		while ( $containerChild ) {
			$node = $containerChild;
			$containerChild = $containerChild->nextSibling;

			// If we've found a top level heading, insert the previous section if
			// necessary and clear the container div.
			// Note well the use of DOMNode#nodeName here. Only DOMElement defines
			// DOMElement#tagName.  So, if there's trailing text - represented by
			// DOMText - then accessing #tagName will trigger an error.
			if ( $node->nodeName === $firstHeadingName ) {
				// The heading we are transforming is always 1 section ahead of the
				// section we are currently processing
				/** @phan-suppress-next-line PhanTypeMismatchArgument DOMNode vs. DOMElement */
				$this->prepareHeading( $body->ownerDocument, $node, $sectionNumber + 1, $this->scriptsEnabled );
				// Insert the previous section body and reset it for the new section
				$container->insertBefore( $sectionBody, $node );

				$sectionNumber += 1;
				$sectionBody = $this->createSectionBodyElement(
					$body->ownerDocument,
					$sectionNumber,
					$this->scriptsEnabled
				);
				continue;
			}

			// If it is not a top level heading, keep appending the nodes to the
			// section body container.
			$sectionBody->appendChild( $node );
		}

		// Append the last section body.
		$container->appendChild( $sectionBody );
	}

	/**
	 * Prepare section headings, add required classes and onclick actions
	 *
	 * @param DOMDocument $doc
	 * @param DOMElement $heading
	 * @param int $sectionNumber
	 * @param bool $isCollapsible
	 */
	private function prepareHeading(
		DOMDocument $doc, DOMElement $heading, $sectionNumber, $isCollapsible
	) {
		$className = $heading->hasAttribute( 'class' ) ? $heading->getAttribute( 'class' ) . ' ' : '';
		$heading->setAttribute( 'class', $className . 'section-heading' );
		if ( $isCollapsible ) {
			$heading->setAttribute( 'onclick', 'mfTempOpenSection(' . $sectionNumber . ')' );
		}

		// prepend indicator - this avoids a reflow by creating a placeholder for a toggling indicator
		$indicator = $doc->createElement( 'div' );
		$indicator->setAttribute( 'class', MobileUI::iconClass( '', 'element',
			'indicator mw-ui-icon-small mw-ui-icon-flush-left' ) );
		$heading->insertBefore( $indicator, $heading->firstChild );
	}

	/**
	 * Creates a Section body element
	 *
	 * @param DOMDocument $doc
	 * @param int $sectionNumber
	 * @param bool $isCollapsible
	 *
	 * @return DOMElement
	 */
	private function createSectionBodyElement( DOMDocument $doc, $sectionNumber, $isCollapsible ) {
		$sectionClass = 'mf-section-' . $sectionNumber;
		if ( $isCollapsible ) {
			// TODO: Probably good to rename this to the more generic 'section'.
			// We have no idea how the skin will use this.
			$sectionClass .= ' ' . self::STYLE_COLLAPSIBLE_SECTION_CLASS;
		}

		// FIXME: The class `/mf\-section\-[0-9]+/` is kept for caching reasons
		// but given class is unique usage is discouraged. [T126825]
		$sectionBody = $doc->createElement( 'section' );
		$sectionBody->setAttribute( 'class', $sectionClass );
		$sectionBody->setAttribute( 'id', 'mf-section-' . $sectionNumber );
		return $sectionBody;
	}

	/**
	 * Gets top headings in the document.
	 *
	 * Note well that the rank order is defined by the
	 * <code>MobileFormatter#topHeadingTags</code> property.
	 *
	 * @param DOMElement $doc
	 * @return array An array first is the highest rank headings
	 */
	private function getTopHeadings( DOMElement $doc ): array {
		$headings = [];

		foreach ( $this->topHeadingTags as $tagName ) {
			$allTags = $doc->getElementsByTagName( $tagName );

			foreach ( $allTags as $el ) {
				if ( $el->parentNode->getAttribute( 'class' ) !== 'toctitle' ) {
					$headings[] = $el;
				}
			}
			if ( $headings ) {
				return $headings;
			}

		}

		return $headings;
	}

	/**
	 * Make it possible to open sections while JavaScript is still loading.
	 *
	 * @param string|null $nonce CSP nonce or null if feature is disabled
	 * @return string The JavaScript code to add event handlers to the skin
	 */
	public static function interimTogglingSupport( $nonce ) {
		$js = <<<JAVASCRIPT
function mfTempOpenSection( id ) {
	var block = document.getElementById( "mf-section-" + id );
	block.className += " open-block";
	// The previous sibling to the content block is guaranteed to be the
	// associated heading due to mobileformatter. We need to add the same
	// class to flip the collapse arrow icon.
	// <h[1-6]>heading</h[1-6]><div id="mf-section-[1-9]+"></div>
	block.previousSibling.className += " open-block";
}
JAVASCRIPT;
		return Html::inlineScript(
			ResourceLoader::filter( 'minify-js', $js ),
			$nonce
		);
	}

	/**
	 * Performs html transformation that splits the body of the document into
	 * sections demarcated by the $headings elements. Also moves the first paragraph
	 * in the lead section above the infobox.
	 * @param DOMElement $doc html document
	 */
	public function apply( DOMElement $doc ) {
		$this->makeSections( $doc, $this->getTopHeadings( $doc ) );
	}
}
